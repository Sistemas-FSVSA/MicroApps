document.addEventListener("DOMContentLoaded", function () {
  inicializarNominaRecaudo();
});


function inicializarNominaRecaudo() {
  obtenerRecaudadores();
  //cargarFechaModal();
  obtenerTramites();
  obtenerGestiones();
  cargarRecaudadoresFaltantes(); // üëà aqu√≠ se llama
}


async function cargarRecaudadoresFaltantes() {
  try {
    const response = await fetch(`${url}/api/recaudo/obtenerFaltaRecaudador`, {
      method: "GET",
      credentials: "include" // üëà Esto env√≠a cookies de sesi√≥n u otras credenciales
    });

    if (!response.ok) throw new Error("Error en la respuesta del servidor");

    const faltantes = await response.json();

    const badge = document.getElementById("badgeFaltantes");
    const lista = document.getElementById("listaRecaudadoresFaltantes");

    // Mostrar cantidad en badge
    if (faltantes.length > 0) {
      badge.textContent = faltantes.length;
      badge.style.display = "inline-block";
    } else {
      badge.style.display = "none";
    }

    // Limpiar lista y renderizar
    lista.innerHTML = "";
    faltantes.forEach((rec, index) => {
      const li = document.createElement("li");
      li.className = "list-group-item";

      const checkboxId = `recaudadorCheck${index}`;

      const label = document.createElement("label");
      label.className = "form-check-label d-flex align-items-center w-100";
      label.setAttribute("for", checkboxId);
      label.style.cursor = "pointer";
      label.style.gap = "0.75rem";

      const checkbox = document.createElement("input");
      checkbox.type = "checkbox";
      checkbox.className = "form-check-input styled-checkbox";
      checkbox.id = checkboxId;

      const span = document.createElement("span");
      span.textContent = rec.nombre;
      span.className = "flex-grow-1";

      label.appendChild(checkbox);
      label.appendChild(span);
      li.appendChild(label);
      lista.appendChild(li);

      // ‚úÖ Escuchar selecci√≥n y confirmar
      checkbox.addEventListener("change", async (e) => {
        if (e.target.checked) {
          const confirmado = await Mensaje(
            "warning",
            "Confirmar asistencia",
            `¬øEst√°s segura? Esta acci√≥n quitar√° a "${rec.nombre}" de la lista por hoy.`,
            false,
            true
          );

          if (confirmado) {
            confirmarAsistencia(rec.idrecaudador);
            li.remove(); // Eliminar visualmente de la lista
          } else {
            checkbox.checked = false; // Si cancela, desmarca el check
          }
        }
      });
    });




  } catch (error) {
    console.error("Error al cargar recaudadores faltantes:", error);
  }
}

async function confirmarAsistencia(idrecaudador) {
  try {

    // Ejemplo de petici√≥n POST (aj√∫stala a tu ruta y backend)
    await fetch(`${url}/api/recaudo/confirmarAsistencia`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify({ idrecaudador })
    });
    
    await cargarRecaudadoresFaltantes(); // Recargar lista de faltantes
  } catch (error) {
    console.error("Error al confirmar asistencia:", error);
    await Mensaje("error", "Error", "No se pudo registrar la asistencia.");
  }
}


// function cargarFechaModal() {
//   var fechaInput = document.getElementById('fechaHora');
//   if (fechaInput) {
//     var today = new Date();
//     var yyyy = today.getFullYear();
//     var mm = String(today.getMonth() + 1).padStart(2, '0');
//     var dd = String(today.getDate()).padStart(2, '0');
//     fechaInput.value = yyyy + '-' + mm + '-' + dd;
//   }
// }

async function obtenerRecaudadores() {
  try {
    const respuesta = await fetch(`${url}/api/recaudo/obtenerRecaudadores`);
    if (!respuesta.ok) throw new Error("Error al obtener recaudadores");
    const recaudadores = await respuesta.json();

    // Ordenar los recaudadores alfab√©ticamente por nombre
    recaudadores.sort((a, b) => a.nombre.localeCompare(b.nombre));

    const selectRecaudadores = document.getElementById("recaudador");
    if (selectRecaudadores) {
      // Opci√≥n por defecto "SELECCIONAR" obligatoria
      selectRecaudadores.innerHTML = `<option value="" selected disabled>Seleccionar</option>`;
      recaudadores.forEach((recaudador) => {
        const option = document.createElement("option");
        option.value = recaudador.idrecaudador;
        option.textContent = recaudador.nombre;
        option.setAttribute("data-cedula", recaudador.cedula);

        // Si la c√©dula est√° vac√≠a, nula o sin info, deshabilitar la opci√≥n
        if (
          recaudador.cedula === null ||
          recaudador.cedula === undefined ||
          recaudador.cedula.trim() === ""
        ) {
          option.disabled = true;
          option.textContent += " (Sin c√©dula)";
        }

        selectRecaudadores.appendChild(option);
      });
    }
  } catch (error) {
    console.error("Error al cargar los recaudadores:", error);
    alert("Error al cargar los recaudadores. Intente de nuevo.");
  }
}

async function obtenerTramites() {
  try {
    const respuesta = await fetch(`${url}/api/recaudo/obtenerTramites`);
    if (!respuesta.ok) throw new Error("Error al obtener los tramites");
    const tramites = await respuesta.json();

    // Ordenar los recaudadores alfab√©ticamente por nombre
    tramites.sort((a, b) => a.nombre.localeCompare(b.nombre));

    const selectTramites = document.getElementById("tipoTramite");
    if (selectTramites) {
      // Opci√≥n por defecto "SELECCIONAR" obligatoria
      selectTramites.innerHTML = `<option value="" selected disabled>Seleccionar</option>`;
      tramites.forEach((tramite) => {
        const option = document.createElement("option");
        option.value = tramite.idtramite;
        option.textContent = tramite.nombre;
        selectTramites.appendChild(option);
      });
    }
  } catch (error) {
    console.error("Error al cargar los tramites:", error);
    alert("Error al cargar los tramites. Intente de nuevo.");
  }
}

function registrarGestion() {
  const selectRecaudador = document.getElementById("recaudador");
  const recaudadorOption = selectRecaudador.options[selectRecaudador.selectedIndex];
  const idrecaudador = recaudadorOption.value;
  const cedula = recaudadorOption.getAttribute("data-cedula");
  const nombre = recaudadorOption.textContent;
  const cantidad = document.getElementById("cantidad").value;
  const selectTramite = document.getElementById("tipoTramite");
  const idtramite = selectTramite.value;
  const fecha = document.getElementById("fechaHora").value;
  const idusuario = localStorage.getItem("idusuario");

  const data = {
    cedula, idrecaudador, idtramite, fecha, nombre, idusuario, cantidad
  };

  // Validar que cantidad sea un valor num√©rico y mayor que cero
  if (isNaN(cantidad) || cantidad === "" || Number(cantidad) <= 0) {
    Mensaje('error', 'Cantidad inv√°lida', 'Ingrese una cantidad num√©rica v√°lida.', false, false);
    return;
  }
  // üëâ Guardar recaudador actualmente seleccionado en el filtro de tabla
  const filtro = document.getElementById("filtroRecaudador");
  const nombreSeleccionado = filtro.value;

  fetch(`${url}/api/recaudo/guardarTramite`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify(data),
    credentials: "include"
  })
    .then(res => {
      if (res.ok) {
        Mensaje('success', '√âxito!', 'Gesti√≥n registrada exitosamente.', true, false);
        selectRecaudador.selectedIndex = 0;
        selectTramite.selectedIndex = 0;
        document.getElementById("cantidad").value = ""; // Limpiar input cantidad
        cargarFechaModal();

        //  Llama a obtenerGestiones con la selecci√≥n previa
        obtenerGestiones(nombreSeleccionado);
        cargarRecaudadoresFaltantes();
      } else {
        console.error("Error al registrar tr√°mite.");
      }
    })
    .catch(err => {
      console.error("Error en la petici√≥n:", err);
    });
}

let gestionesData = []; // Variable global para mantener los datos

function obtenerGestiones(nombreSeleccionado = null) {
  fetch(`${url}/api/recaudo/obtenerGestiones`, {
    method: "GET",
    credentials: "include"
  })
    .then(res => res.json())
    .then(data => {
      gestionesData = data;

      const select = document.getElementById("filtroRecaudador");

      // ‚úÖ Reemplazar opciones manteniendo la seleccion previa
      const nombresUnicos = [...new Set(gestionesData.map(g => g.nombre).filter(Boolean))];
      nombresUnicos.sort();

      select.innerHTML = '<option value="">-- Selecciona un recaudador --</option>';
      nombresUnicos.forEach(nombre => {
        const option = document.createElement("option");
        option.value = nombre;
        option.textContent = nombre;
        select.appendChild(option);
      });

      // ‚úÖ Restaurar valor seleccionado si se indic√≥ uno
      if (nombreSeleccionado) {
        select.value = nombreSeleccionado;
      }

      // ‚úÖ Filtrar autom√°ticamente por el valor actual
      filtrarGestionesPorRecaudador();
    })
    .catch(err => {
      console.error("Error al obtener las gestiones:", err);
    });
}

function filtrarGestionesPorRecaudador() {
  const seleccion = document.getElementById("filtroRecaudador").value;
  if (!seleccion) {
    renderizarGestionesTabla([]); // Vac√≠a
    return;
  }

  const filtradas = gestionesData.filter(g => g.nombre === seleccion);
  renderizarGestionesTabla(filtradas);
}

function renderizarGestionesTabla(gestionesParaMostrar = []) {
  const tablaId = '#gestiones';

  // Ordenar por ID descendente
  const gestionesOrdenadas = [...gestionesParaMostrar].sort((a, b) => b.idplanillatramite - a.idplanillatramite);

  if ($.fn.DataTable.isDataTable(tablaId)) {
    const tabla = $(tablaId).DataTable();
    tabla.clear();

    gestionesOrdenadas.forEach((gestion) => {
      const esActiva = !!gestion.estado; // Asegura booleano
      const estadoTexto = esActiva ? "Activo" : "Anulado";

      const accionHtml = esActiva
        ? `<button class="btn btn-fsvsaoff" onclick="borrarGestion(${gestion.idplanillatramite})"><i class="fa fa-trash mr-1"></i>Eliminar</button>`
        : `<button class="btn btn-fsvsaon" title="Tr√°mite anulado" onclick="mostrarInfoAnulacion('${gestion.motivo}', '${gestion.usuarioAnulo}')"><i class="fa fa-bell mr-1"></i>Informaci√≥n</button>`;

      tabla.row.add([
        gestion.idplanillatramite || "",
        gestion.nombre || "Sin nombre",
        gestion.cedula || "Sin c√©dula",
        formatFecha(gestion.fecha),
        gestion.nombreTramite || "Sin gesti√≥n",
        estadoTexto,
        accionHtml
      ]);
    });

    tabla.draw();
  } else {
    $(tablaId).DataTable({
      data: gestionesOrdenadas.map(gestion => {
        const esActiva = !!gestion.estado;
        const estadoTexto = esActiva ? "Activo" : "Anulado";
        const accionHtml = esActiva
          ? `<button class="btn btn-fsvsaoff" onclick="borrarGestion(${gestion.idplanillatramite})"><i class="fa fa-trash mr-1"></i>Eliminar</button>`
          : `<button class="btn btn-fsvsaon" title="Tr√°mite anulado" onclick="mostrarInfoAnulacion('${gestion.motivo}', '${gestion.usuarioAnulo}')"><i class="fa fa-bell mr-1"></i>Informaci√≥n</button>`;

        return [
          gestion.idplanillatramite || "",
          gestion.nombre || "Sin nombre",
          gestion.cedula || "Sin c√©dula",
          formatFecha(gestion.fecha),
          gestion.nombreTramite || "Sin gesti√≥n",
          estadoTexto,
          accionHtml
        ];
      }),
      columns: [
        { title: "ID" },
        { title: "Nombre" },
        { title: "C√©dula" },
        { title: "Fecha" },
        { title: "Gesti√≥n" },
        { title: "Estado" },
        { title: "Acci√≥n", orderable: false }
      ],
      order: [[0, 'desc']],
      language: {
        url: 'https://cdn.datatables.net/plug-ins/1.13.4/i18n/es-MX.json'
      },
      responsive: true
    });
  }
}

function mostrarInfoAnulacion(motivo, usuario) {
  Swal.fire({
    icon: 'info',
    title: 'Informaci√≥n de Anulaci√≥n',
    html: `
      <p><strong>Motivo:</strong> ${motivo}</p>
      <p><strong>Anulado por:</strong> ${usuario}</p>
    `,
    confirmButtonText: 'Cerrar',
    customClass: {
      confirmButton: 'swal-confirm-button'
    }
  });
}

async function borrarGestion(idplanillatramite) {
  const confirmar = await Mensaje(
    'warning',
    '¬øEst√° seguro de anular esta gesti√≥n?',
    'Esta acci√≥n no se puede deshacer.',
    false,
    true
  );

  if (confirmar) {
    const { value: motivo } = await Swal.fire({
      title: 'Motivo de anulaci√≥n',
      input: 'text',
      inputLabel: 'Por favor ingrese el motivo',
      inputPlaceholder: 'Ej: Error en los datos',
      inputValidator: (value) => {
        if (!value) {
          return 'Debe ingresar un motivo de anulaci√≥n.';
        }
      },
      showCancelButton: true,
      confirmButtonText: 'Anular',
      cancelButtonText: 'Cancelar',
      customClass: {
        confirmButton: 'swal-confirm-button',
        cancelButton: 'swal-cancel-button'
      }
    });

    if (motivo) {
      // Obtener el idusuario desde localStorage
      const idusuario = localStorage.getItem('idusuario');

      if (!idusuario) {
        Mensaje('error', 'Error', 'No se encontr√≥ el ID del usuario en localStorage.', false, false);
        return;
      }

      // Enviar al backend
      fetch(`${url}/api/recaudo/anularTramite`, {
        method: "POST", // <-- CAMBIADO a POST
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "include",
        body: JSON.stringify({
          idplanillatramite,
          motivo,
          idusuario: parseInt(idusuario)
        })
      })
        .then(res => {
          if (res.ok) {
            Mensaje('success', '√âxito', 'Gesti√≥n anulada exitosamente.', true, false);
            obtenerGestiones();
          } else {
            Mensaje('error', 'Error', 'No se pudo anular la gesti√≥n.', false, false);
          }
        })
        .catch(err => {
          console.error("Error al anular la gesti√≥n:", err);
          Mensaje('error', 'Error', 'Error de conexi√≥n con el servidor.', false, false);
        });
    }
  }
}

function generarNomina() {
  const fechaDesde = document.getElementById('fechaDesde')?.value || '';
  const fechaHasta = document.getElementById('fechaHasta')?.value || '';

  if (!fechaDesde || !fechaHasta) {
    Mensaje('error', 'Campos obligatorios', 'Debe ingresar ambas fechas.', false, false);
    return;
  }

  showSpinner(); // Mostrar spinner

  fetch(`${url}/api/recaudo/generarNomina`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    credentials: "include",
    body: JSON.stringify({ fechaDesde, fechaHasta })
  })
    .then(res => res.json())
    .then(data => {
      if (!data.resumen || !Array.isArray(data.resumen)) {
        throw new Error("Respuesta inv√°lida del servidor");
      }

      // Generar ambos Excel
      generarExcelResumen(data.resumen);
      generarExcelPlanillas(data.resumen);

      Mensaje('success', '√âxito', 'N√≥mina generada correctamente.', true, false);
    })
    .catch(err => {
      console.error("Error al generar la n√≥mina:", err);
      Mensaje('error', 'Error', 'No se pudo generar la n√≥mina.', false, false);
    })
    .finally(() => {
      hideSpinner(); // Ocultar spinner al final
    });
}

function generarExcelResumen(resumen) {
  const encabezados = Object.keys(resumen[0] || {});
  const datos = [encabezados];

  resumen.forEach(vendedor => {
    const fila = encabezados.map(key => vendedor[key]);
    datos.push(fila);
  });

  const ws = XLSX.utils.aoa_to_sheet(datos);

  // Aplicar formato moneda a columnas monetarias
  encabezados.forEach((key, colIndex) => {
    const isMonetario = key.startsWith("Pago") || key.toLowerCase().includes("valor") || key.toLowerCase().includes("monto");

    if (isMonetario) {
      for (let rowIndex = 1; rowIndex < datos.length; rowIndex++) {
        const cellRef = XLSX.utils.encode_cell({ r: rowIndex, c: colIndex });
        if (ws[cellRef]) {
          ws[cellRef].t = 'n';
          ws[cellRef].z = '"$"#,##0.00'; // Formato de moneda COP
        }
      }
    }
  });

  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "ResumenNomina");

  XLSX.writeFile(wb, `Resumen_Nomina_${new Date().toISOString().split('T')[0]}.xlsx`);
}

function generarExcelPlanillas(resumen) {
  const fechaActual = new Date();
  const datos = [
    [
      'C√©dula Empleado',
      'C√≥digo Concepto',
      'C√≥digo Centro de Costos',
      'C√≥digo Concepto Referencia',
      'Horas',
      'Valor',
      'Per√≠odo',
      'Fecha',
      'Salario',
      'Unidades Producidas',
      'Es Prestaci√≥n',
      'N√∫mero Pr√©stamo',
      'D√≠as mes 1',
      'D√≠as mes 2',
      'Fecha Inicio',
      'Base',
      'Fecha Final Vacaci√≥n',
    ],
  ];

  resumen.forEach(item => {
    const total =
      (item.PagoMesHumanos || 0) +
      (item.PagoMesMascotas || 0) +
      (item.PagoAnualidadHumanos || 0) +
      (item.PagoAnualidadMascotas || 0) +
      (item.PagoMesSeguro || 0);

    const gestionesPago = Object.entries(item)
      .filter(([k, _]) => k.startsWith("Pago") && typeof item[k] === "number" && !k.includes("PagoMes") && !k.includes("PagoAnualidad") && !k.includes("PagoMesSeguro"))
      .reduce((acc, [_, val]) => acc + val, 0);

    const valorFinal = total + gestionesPago;

    datos.push([
      item.Vendedor,
      '074', '018', '', '', valorFinal, '', '', '', '', '', '', '', '', '', '', ''
    ]);
  });

  const ws = XLSX.utils.aoa_to_sheet(datos);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Planilla");

  XLSX.writeFile(wb, `Planilla_Nomina_${fechaActual.toISOString().split('T')[0]}.xlsx`);
}




